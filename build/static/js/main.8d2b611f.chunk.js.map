{"version":3,"sources":["Team.js","App.js","reportWebVitals.js","index.js"],"names":["Team","Agenre","Bgenre","Cgenre","candidates","useState","teamA","teamB","teamC","team","setTeam","oldA","oldB","oldC","oldTeam","setOldTeam","oldTeamArray","oldCandidate","setOldCandidate","compareArray","arr1","arr2","forEach","item","i","indexOf","splice","length","onClick","newCandi","slice","shuffled","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","shuffledArray","alert","useEffect","conditionA","conditionB","conditionC","console","log","join","App","ganres","setGanre","users","setUsers","userInput","setUserInput","onChanges","e","target","value","name","saveButton","user","onChange","onKeyPress","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d2b611f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction Team({ Agenre, Bgenre, Cgenre, candidates }) {\n  const [team, setTeam] = useState({\n    teamA: [],\n    teamB: [],\n    teamC: [],\n  });\n  const [oldTeam, setOldTeam] = useState({\n    oldA: [],\n    oldB: [],\n    oldC: [],\n  });\n\n  const [oldCandidate, setOldCandidate] = useState({\n    oldTeamArray: [],\n  });\n\n  const { oldA, oldB, oldC } = oldTeam;\n  const { teamA, teamB, teamC } = team;\n  const { oldTeamArray } = oldCandidate;\n\n  const shuffle = (array) => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n  const compareArray = (arr1, arr2) => {\n    // 결과값\n    var rst = false;\n\n    // arr1 배열의 크기만큼 반복\n    arr1.forEach(function (item) {\n      // arr1 배열 아이템이, arr2 배열에 있는지 확인\n      // 있으면, arr2에 item이 존재하는 index 리턴\n      // 없으면, -1 리턴\n      var i = arr2.indexOf(item);\n\n      // 존재하면, splice함수를 이용해서 arr2 배열에서 item 삭제\n      if (i > -1) arr2.splice(i, 1);\n    });\n\n    // compare2의 길이가 0이면 동일하다고 판단.\n    rst = arr2.length === 1 || 0;\n\n    return rst;\n  };\n  const onClick = () => {\n    const newCandi = candidates.slice();\n    if (newCandi.length === 9) {\n      const shuffled = shuffle(newCandi);\n      const shuffledArray = shuffled.slice();\n      setOldCandidate({\n        oldTeamArray: shuffledArray,\n      });\n      setTeam({\n        teamA: shuffled.splice(0, 3),\n        teamB: shuffled.splice(0, 3),\n        teamC: shuffled.splice(0, 3),\n      });\n\n      setOldTeam({\n        oldA: oldTeamArray.splice(0, 3),\n        oldB: oldTeamArray.splice(0, 3),\n        oldC: oldTeamArray.splice(0, 3),\n      });\n    } else {\n      alert('9명을 입력하세요.');\n    }\n  };\n\n  useEffect(() => {\n    const conditionA = compareArray(oldA, teamA);\n    const conditionB = compareArray(oldB, teamB);\n    const conditionC = compareArray(oldC, teamC);\n    if (conditionA || conditionB || conditionC) {\n      console.log('mixed again');\n      onClick();\n    }\n    /* eslint-disable-next-line */\n  }, [teamA, oldA]);\n\n  return (\n    <>\n      <div>\n        <br />\n        <br />\n        {Agenre}팀: 임원A , {teamA.join(', ')}\n        <br />\n        <br />\n        {Bgenre}팀: 임원B , {teamB.join(', ')}\n        <br />\n        <br />\n        {Cgenre}팀: 임원C , {teamC.join(', ')}\n      </div>\n      <br />\n      <button onClick={onClick}>다음시즌</button>\n      <br />\n    </>\n  );\n}\n\nexport default Team;\n","import React, { useEffect, useState } from 'react';\nimport Team from './Team';\n\nfunction App() {\n  const [ganres, setGanre] = useState({ Agenre: '', Bgenre: '', Cgenre: '' });\n  const [users, setUsers] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const { Agenre, Bgenre, Cgenre } = ganres;\n  const onChanges = (e) => {\n    const { value, name } = e.target;\n    setGanre({\n      ...ganres,\n      [name]: value,\n    });\n  };\n  useEffect(() => {\n    console.log('user updated', users);\n  }, [users]);\n\n  const onInput = (e) => {\n    setUserInput(e.target.value);\n  };\n  const enterPressed = (e) => {\n    if (e.key === 'Enter') {\n      saveButton();\n    }\n  };\n  const saveButton = () => {\n    if (users.length < 9 && userInput) {\n      const user = userInput;\n      setUsers([...users, user]);\n      setUserInput('');\n    } else {\n      alert('회원수가 이상해..');\n    }\n  };\n  return (\n    <>\n      <div>\n        팀A 장르 : <input name=\"Agenre\" onChange={onChanges} value={Agenre} />\n        팀B 장르 : <input name=\"Bgenre\" onChange={onChanges} value={Bgenre} />\n        팀C 장르 : <input name=\"Cgenre\" onChange={onChanges} value={Cgenre} />\n      </div>\n      <br />\n      <div>\n        회원이름 입력 :{' '}\n        <input\n          name=\"userInput\"\n          onChange={onInput}\n          value={userInput}\n          onKeyPress={enterPressed}\n        />\n        <button onClick={saveButton}>저장</button> <br />\n        회원: {users.join(', ')}\n      </div>\n      <Team\n        Agenre={Agenre}\n        Bgenre={Bgenre}\n        Cgenre={Cgenre}\n        candidates={users}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}